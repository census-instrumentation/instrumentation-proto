// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opencensus/proto/exporter/exporter.proto

/*
Package exporterproto is a generated protocol buffer package.

It is generated from these files:
	opencensus/proto/exporter/exporter.proto

It has these top-level messages:
	ExportRequest
	ExportResponse
*/
package exporterproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import opencensus_proto_trace "github.com/census-instrumentation/opencensus-proto/gen-go/traceproto"
import opencensus_proto_stats_metrics "github.com/census-instrumentation/opencensus-proto/gen-go/statsproto/metricsproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ExportRequest struct {
	Spans   []*opencensus_proto_trace.Span           `protobuf:"bytes,1,rep,name=spans" json:"spans,omitempty"`
	Metrics []*opencensus_proto_stats_metrics.Metric `protobuf:"bytes,2,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *ExportRequest) Reset()                    { *m = ExportRequest{} }
func (m *ExportRequest) String() string            { return proto.CompactTextString(m) }
func (*ExportRequest) ProtoMessage()               {}
func (*ExportRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ExportRequest) GetSpans() []*opencensus_proto_trace.Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

func (m *ExportRequest) GetMetrics() []*opencensus_proto_stats_metrics.Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type ExportResponse struct {
}

func (m *ExportResponse) Reset()                    { *m = ExportResponse{} }
func (m *ExportResponse) String() string            { return proto.CompactTextString(m) }
func (*ExportResponse) ProtoMessage()               {}
func (*ExportResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*ExportRequest)(nil), "opencensus.proto.exporter.ExportRequest")
	proto.RegisterType((*ExportResponse)(nil), "opencensus.proto.exporter.ExportResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Export service

type ExportClient interface {
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
}

type exportClient struct {
	cc *grpc.ClientConn
}

func NewExportClient(cc *grpc.ClientConn) ExportClient {
	return &exportClient{cc}
}

func (c *exportClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	out := new(ExportResponse)
	err := grpc.Invoke(ctx, "/opencensus.proto.exporter.Export/Export", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Export service

type ExportServer interface {
	Export(context.Context, *ExportRequest) (*ExportResponse, error)
}

func RegisterExportServer(s *grpc.Server, srv ExportServer) {
	s.RegisterService(&_Export_serviceDesc, srv)
}

func _Export_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opencensus.proto.exporter.Export/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportServer).Export(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Export_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opencensus.proto.exporter.Export",
	HandlerType: (*ExportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Export",
			Handler:    _Export_Export_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opencensus/proto/exporter/exporter.proto",
}

func init() { proto.RegisterFile("opencensus/proto/exporter/exporter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0xad, 0xe2, 0x0a, 0x11, 0x45, 0x7a, 0x5a, 0xcb, 0x1e, 0xa4, 0x07, 0xa9, 0x60, 0x13,
	0xa8, 0x2f, 0x20, 0x0b, 0xe2, 0x49, 0x58, 0xea, 0xcd, 0x8b, 0x64, 0xcb, 0x50, 0x73, 0x68, 0x12,
	0x33, 0x53, 0xd8, 0x17, 0xf0, 0xbd, 0xc5, 0xcc, 0xb6, 0x45, 0xca, 0xc2, 0x5e, 0x3a, 0xe1, 0xe7,
	0xfb, 0xff, 0x99, 0xce, 0x88, 0xc2, 0x79, 0xb0, 0x0d, 0x58, 0xec, 0x51, 0xf9, 0xe0, 0xc8, 0x29,
	0xd8, 0x79, 0x17, 0x08, 0xc2, 0xf8, 0x90, 0x51, 0x4f, 0x6f, 0x27, 0x92, 0x15, 0x39, 0x00, 0x59,
	0x3e, 0x0b, 0xa1, 0xa0, 0x1b, 0xe0, 0x2f, 0xc3, 0xd9, 0xe3, 0x8c, 0x41, 0xd2, 0x84, 0xaa, 0x03,
	0x0a, 0xa6, 0x19, 0x2b, 0xd3, 0xf9, 0x4f, 0x22, 0xae, 0x5e, 0x62, 0x7c, 0x0d, 0xdf, 0x3d, 0x20,
	0xa5, 0x95, 0x38, 0x47, 0xaf, 0x2d, 0x2e, 0x93, 0xbb, 0xb3, 0xe2, 0xb2, 0x5a, 0xc9, 0xd9, 0x38,
	0xdc, 0xed, 0xdd, 0x6b, 0x5b, 0x33, 0x9a, 0x3e, 0x8b, 0x8b, 0x7d, 0xec, 0xf2, 0x34, 0xba, 0xee,
	0xe7, 0xae, 0x38, 0x85, 0x1c, 0xba, 0xbf, 0xc5, 0x5a, 0x0f, 0xb6, 0xfc, 0x46, 0x5c, 0x0f, 0x63,
	0xa0, 0x77, 0x16, 0xa1, 0x32, 0x62, 0xc1, 0x4a, 0xfa, 0x39, 0xbe, 0x0a, 0x79, 0x70, 0x37, 0xf2,
	0xdf, 0x5f, 0x64, 0x0f, 0x47, 0x90, 0xdc, 0x28, 0x3f, 0x59, 0xef, 0xc4, 0xca, 0xb8, 0xc3, 0x86,
	0xf5, 0x7e, 0x43, 0x10, 0x36, 0x7f, 0xfa, 0x26, 0xf9, 0x78, 0x6d, 0x0d, 0x7d, 0xf5, 0x5b, 0xd9,
	0xb8, 0x4e, 0xb1, 0xa5, 0x34, 0x16, 0x29, 0xf4, 0x1d, 0x58, 0xd2, 0x64, 0x9c, 0x55, 0x53, 0x5a,
	0xc9, 0x57, 0x68, 0xc1, 0x96, 0xed, 0x74, 0xf5, 0x28, 0x6e, 0x17, 0xb1, 0x3c, 0xfd, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x07, 0x77, 0x71, 0x5d, 0x1e, 0x02, 0x00, 0x00,
}
