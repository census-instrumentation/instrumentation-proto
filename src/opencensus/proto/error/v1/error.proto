// Copyright 2018, OpenCensus Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package opencensus.proto.trace.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_package = "io.opencensus.proto.error.v1";
option java_outer_classname = "ErrorProto";

option go_package = "github.com/census-instrumentation/opencensus-proto/gen-go/error/v1";

// Error event that is generated by integration or application.
message Error {
  // Time when the error occurred.
  // This field is required.  
  google.protobuf.Timestamp time = 1;

  // Error description such as exception message.
  // This field is required.  
  string message = 2;

  // TraceId of the span in which scope the error occurred. 
  // Must be set if there is a current span or it was explicitly
  // provided by the caller
  bytes trace_id = 3;

  // SpanId of the span in which scope the error occurred. 
  // Must be set if there is a current span or it was explicitly
  // provided by the caller
  bytes span_id = 4;

  // Describes additional error details. This data should be 
  // provided by integration site or application when error is 
  // reported
  message ErrorDetails
  {
    // Type of the error such as Exception/Error class type
    string error_type = 1;  

    // Parsed stack trace that contains line number, file info, method info, etc...
    // Agent exporter must to it's best to parse stack trace
    // unless agent instructed exporter to send raw format only.
    StackTrace parsed_stack_trace = 2;

    // Describes stack trace in the format convenient for specific language and exporter
    oneof raw_stack_trace
    {
      // Raw string value returned by: 
      // Java: Must be the return value of Throwable.printStackTrace().
      // Python: Must be the return value of traceback.format_exc().
      // JavaScript: Must be the value of error.stack as returned by V8.
      // Ruby: Must contain joined frames returned by Exception.backtrace.
      // C#: Must be the return value of Exception.ToString().
      // PHP: Must start with PHP (Notice|Parse error|Fatal error|Warning) and contain the result of (string)$exception.
      string string_value = 3;

      // Go: Must be the return value of runtime.Stack().            
      bytes byte_value = 4; //TODO: can we send string for Go as well?
      
      // see https://cloud.google.com/error-reporting/docs/formatting-error-messages
    }

    // Discussion (TODO: do we need raw exporter now):
    //  - Having raw stack trace is beneficial for all backends that support exceptions.
    //  - Parsed stack is needed for advanced scenarios only.
    //    E.g. Jaeger likely does not need parsed one, and StackDriver has parser on the backend
    //  Going forward, having stack parsing implemented in one place (agent exporter)
    //  and for specific language (i.e using helper tools that exists in this language) 
    //  is more sustainable approach then making all backends parse all language-specific errors.
    // 
    //  One the other side, backends that do not need parsed stack would still need raw one 
    //  and making them format string from it is not sustainable again.
    
    //  Proposal: by default send both, make it configurable by agent/service
  }

  // Error details associated with this error
  ErrorDetails error_info = 5;

  // Represents a list of exceptions that caused this exception
  // Java: cause
  // Python 3: cause
  // Ruby: cause
  // C#: InnerException
  message CauseErrors
  {
    repeated ErrorDetails cause = 1;
    // TODO: Java: what about suppressed exceptions?
  }
  
  // List of exceptions that cause the error.
  CauseErrors causes = 6;
  
  // Error severity.
  ErrorSeverity severity = 7;

  //TODO: can we have common code with trace proto?
  // A set of attributes, each with a key and a value.
  message Attributes {
    // The set of attributes. The value can be a string, an integer, or the
    // Boolean values `true` and `false`. For example:
    //
    //     "HelpLink": "http://some.link"
    //     "custom.attribute": ""
    map<string, AttributeValue> attribute_map = 1;

    // The number of attributes that were discarded. Attributes can be discarded
    // because their keys are too long or because there are too many attributes.
    // If this value is 0, then no attributes were dropped.
    int32 dropped_attributes_count = 2;
  }
  
  // A list of attributes on the error
  Attributes attributes = 7;
}

// Indicates error severity
enum ErrorSeverity
{
  SEVERITY_UNSPECIFIED = 0;

  // Indicates critical issue, panic, after which application stops
  // such as critical configuration error. OutOfMemory, etc...
  CRITICAL = 1; 

  // Indicates unhandled exception that does not lead to 
  // application crash such as unhandled exception in the controller
  ERROR = 2; 

  // Indicates handled exception. Must be reported in application code
  // explicitly. Agent should allow configuring error verbosity and 
  // prevent such errors from being exported
  WARNING = 3;
}

// TODO : copy-paste from trace, move to common module

// The value of an Attribute.
message AttributeValue {
  // The type of the value.
  oneof value {
    // A string up to 256 bytes long.
    TruncatableString string_value = 1;
    // A 64-bit signed integer.
    int64 int_value = 2;
    // A Boolean value represented by `true` or `false`.
    bool bool_value = 3;
    // A double value.
    double double_value = 4;
  }
}

// The call stack which originated this span.
message StackTrace {
  // A single stack frame in a stack trace.
  message StackFrame {
    // The fully-qualified name that uniquely identifies the function or
    // method that is active in this frame.
    TruncatableString function_name = 1;
    // An un-mangled function name, if `function_name` is
    // [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
    // be fully qualified.
    TruncatableString original_function_name = 2;
    // The name of the source file where the function call appears.
    TruncatableString file_name = 3;
    // The line number in `file_name` where the function call appears.
    int64 line_number = 4;
    // The column number where the function call appears, if available.
    // This is important in JavaScript because of its anonymous functions.
    int64 column_number = 5;
    // The binary module from where the code was loaded.
    Module load_module = 6;
    // The version of the deployed source code.
    TruncatableString source_version = 7;
  }

  // A collection of stack frames, which can be truncated.
  message StackFrames {
    // Stack frames in this call stack.
    repeated StackFrame frame = 1;
    // The number of stack frames that were dropped because there
    // were too many stack frames.
    // If this value is 0, then no stack frames were dropped.
    int32 dropped_frames_count = 2;
  }

  // Stack frames in this stack trace.
  StackFrames stack_frames = 1;

  // The hash ID is used to conserve network bandwidth for duplicate
  // stack traces within a single trace.
  //
  // Often multiple spans will have identical stack traces.
  // The first occurrence of a stack trace should contain both
  // `stack_frames` and a value in `stack_trace_hash_id`.
  //
  // Subsequent spans within the same request can refer
  // to that stack trace by setting only `stack_trace_hash_id`.
  //
  // TODO: describe how to deal with the case where stack_trace_hash_id is
  // zero because it was not set.
  uint64 stack_trace_hash_id = 2;
}

// A description of a binary module.
message Module {
  // TODO: document the meaning of this field.
  // For example: main binary, kernel modules, and dynamic libraries
  // such as libc.so, sharedlib.so.
  TruncatableString module = 1;

  // A unique identifier for the module, usually a hash of its
  // contents.
  TruncatableString build_id = 2;
}

// A string that might be shortened to a specified length.
message TruncatableString {
  // The shortened string. For example, if the original string was 500 bytes long and
  // the limit of the string was 128 bytes, then this value contains the first 128
  // bytes of the 500-byte string. Note that truncation always happens on a
  // character boundary, to ensure that a truncated string is still valid UTF-8.
  // Because it may contain multi-byte characters, the size of the truncated string
  // may be less than the truncation limit.
  string value = 1;

  // The number of bytes removed from the original string. If this
  // value is 0, then the string was not shortened.
  int32 truncated_byte_count = 2;
}