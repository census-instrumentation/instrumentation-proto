// Copyright 2018, OpenCensus Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// NOTE: This proto is experimental and is subject to change at this point.
// Please do not use it at the moment.

package opencensus.proto.agent.error.v1;

import "opencensus/proto/agent/common/v1/common.proto";
import "opencensus/proto/error/v1/error.proto";
import "opencensus/proto/error/v1/error_config.proto";

option java_multiple_files = true;
option java_package = "io.opencensus.proto.agent.error.v1";
option java_outer_classname = "ErrorServiceProto";

option go_package = "github.com/census-instrumentation/opencensus-proto/gen-go/agent/error/v1";

// Service that can be used to push errors and configs between one Application
// instrumented with OpenCensus and an agent, or between an agent and a
// central collector or config service (in this case errors and configs are
// sent/received to/from multiple Applications).
service ErrorService {
  // After initialization, this RPC must be kept alive for the entire life of
  // the application. The agent pushes configs down to applications via a
  // stream.
  rpc Config(stream CurrentLibraryConfig) returns (stream UpdatedLibraryConfig) {}

  // For performance reasons, it is recommended to keep this RPC
  // alive for the entire life of the application.
  rpc Export(stream ExportErrorServiceRequest) returns (stream ExportErrorServiceResponse) {}
}

message CurrentLibraryConfig {
  // This is required only in the first message on the stream or if the
  // previous sent CurrentLibraryConfig message has a different Node (e.g.
  // when the same RPC is used to configure multiple Applications).
  opencensus.proto.agent.common.v1.Node node = 1;

  // Current configuration.
  opencensus.proto.error.v1.ErrorConfig config = 2;
}

message UpdatedLibraryConfig {
  // This field is ignored when the RPC is used to configure only one Application.
  // This is required only in the first message on the stream or if the
  // previous sent UpdatedLibraryConfig message has a different Node.
  opencensus.proto.agent.common.v1.Node node = 1;

  // Requested updated configuration.
  opencensus.proto.error.v1.ErrorConfig config = 2;
}

message ExportErrorServiceRequest {
  // This is required only in the first message on the stream or if the
  // previous sent ExportErrorServiceRequest message has a different Node (e.g.
  // when the same RPC is used to send Errors from multiple Applications).
  opencensus.proto.agent.common.v1.Node node = 1;

  // A list of Errors that belong to the last received Node.
  repeated opencensus.proto.error.v1.Error errors = 2;
}

message ExportErrorServiceResponse {
}
